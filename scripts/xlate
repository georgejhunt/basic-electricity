#!/bin/env python
# -*- coding: utf-8 -*-
# use (or create) Portable Objecet Template to localize *.sml file 
# input parameters <full path of sml file> <volume> <language>

import sys, os
#from google.cloud import translate
from googleapiclient.discovery import build

import yaml
import codecs
import re

cwd = os.getcwd()
liec_dir = os.environ["BE_LIEC_DIR"]
be_dir = os.environ["BE_DIR"]
be_logfile = os.environ["BE_LOGFILE"]

if len(sys.argv) < 3:
  print "input parameters <full path of sml file> <volume> <language>"
  sys.exit(1)

# split apart identifier from full path
basename = os.path.basename(sys.argv[1])

# volume is second parameter
volume = sys.argv[2]

# target language is third parameter
tlang = sys.argv[3]
if tlang == 'en':
    sys.exit(0)

# individual google cloud authentication seem easiest (first $300 of service is free)
if tlang != 'en':
    API_KEY = os.environ["BE_API_KEY"]
    service = build('translate', 'v2', developerKey=API_KEY)

def gtranslate(text,slang='en',targetlanguage='es'):
    # if source is english, do not translate, but let the rest of the code work
    if slang == targetlanguage:
           retn ={}
           retn["translations"] = [ { "translatedText" : text},]
           return retn
    return service.translations().list(
           source=slang, 
           target=targetlanguage,
           q=[text]
           ).execute()

def logit(msg):
   logf = open(be_logfile,"a")
   logf.write(msg)
   logf.close()

def add_quote_tags(inp):
   outstr=''
   index=0
   qstart = inp.find('"',index)
   while qstart != -1:
      outstr += inp[index:qstart] + '<quote>'
      index = qstart + 1
      qstart = inp.find('"',index)
      outstr += inp[index:qstart] + '</quote>'
      index = qstart + 1
      qstart = inp.find('"',index)
   if len(outstr) == 0:
      return inp
   return outstr
   
# Look to see if we already have translation going for this sml file
inputFilename = be_dir + '/po-templates/' + basename +'.pot.' + tlang
try: # to load the portable object translation file
   fd = codecs.open(inputFilename,"r","utf-8")
   po = yaml.load(fd)
   fd.close()
except:
   po = {}
   
# open the english SubML source file
fd = open (sys.argv[1],"r")
raw = fd.read()
fd.close()

tags = [ [ '<para>\n', '</para>\n' ],
         [ '<chaptertitle>', '</chaptertitle>' ],
         [ '<sectiontitle>', '</sectiontitle>' ],
         [ '<item>', '</item>' ], 
 ]
rawmap = []
dict_changed = False
gcalls=0
msg =  ("\n=========================================================\n" 
      "xlate called with source:%s, volume:%s, target language:%s\n"
      "initial size of portable object dictionary:%s\n") % \
       (sys.argv[1],sys.argv[2],sys.argv[3],len(po),) 
logit(msg)

# iterate over the tag types that must be translated
for j in range(len(tags)):
    tag,tagend = tags[j]
    index = 0
    num_nibbles = 0
    #print("tag:%s, tagend: %s" % (tag,tagend,))
    while index < len(raw) and index != len(tag)-1:
         index = raw.find(tag,index) + len(tag)
         if index != len(tag)-1:
            endnibble = raw.find(tagend,index) 
            if endnibble != -1:
               english_text = (raw[index:endnibble])
               english_text = add_quote_tags(english_text)
               if not english_text in po.keys():
                  print 'sending google a phrase to translate'
                  tr = gtranslate(english_text,targetlanguage=tlang)
                  asciistr = tr['translations'][0]['translatedText']
                  po[english_text] = {"xlate":asciistr, "tag":tag}
                  dict_changed = True
                  gcalls += 1
               else:
                   asciistr = po[english_text]['xlate']
               # record the starting index, and end
               rawmap.append([ index, endnibble ])
               index = endnibble + len(tagend) + 1
               num_nibbles += 1

# now reread the input string, and assemble the outstr
index = 0

# rewrite the .pot file if any changes
if dict_changed:
    fd = codecs.open(inputFilename,"w","utf-8")
    yaml.dump(po,fd,allow_unicode=True)
    fd.close()

# use sorted rawmap as indexes into the raw input that need substitution
rawmap.sort()
#print rawmap
outstr = u''
xlated = u''
for startnibble, endnibble in rawmap:
    outstr += raw[index:startnibble]
    dictkey = raw[startnibble:endnibble]
    english_text = add_quote_tags(dictkey)
    xlated += po[english_text]['xlate']
    re.sub('&#34;',"'",xlated)
    outstr += xlated
    index = endnibble
    

# now write out the translated sml file
outFile = liec_dir + '/build/'+ tlang + '/' + volume + '/'+ basename 
fd = codecs.open(outFile,"w","utf-8")
fd.write(outstr)
fd.close()
#print(num_nibbles)
msg =  "Calls to google translate: %s, final size of po dictionary:%s" % (gcalls,len(po),) 
logit(msg)
